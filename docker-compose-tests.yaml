version: '3.6'
services:
  postgres:
    image: postgres:11.2-alpine
    restart: "always"
    volumes:
      - db_data:/var/lib/postgresql-test/data
  graphql-engine:
    image: hasura/graphql-engine:v1.0.0-beta.9
    ports:
      - "${API_PORT:-8080}:8080"
    depends_on:
      - postgres
    restart: "always"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
  hasura-service-tests:
    build:
      context: ./database-service
      dockerfile: ./Dockerfile
      target: integration-test
    restart: "no"
    depends_on:
      - graphql-engine
    volumes:
      - ./database-service:/app
      - ./fixtures:/app/fixtures
      - ./test-utils:/app/tests/utils
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=./tests:$PYTHONPATH
    entrypoint: pytest --hasura-endpoint http://graphql-engine:8080 --root /app -ra --junitxml=test-reports/test-report.xml
  fixtures-service:
    build:
      context: ./fixtures-generator
      dockerfile: ./Dockerfile
    restart: "no"
    user: $USER
    volumes:
      - ./fixtures-generator:/app
      - ./fixtures:/app/fixtures
      - ./test-utils:/app/test_utils
      - ./graphql/responses:/app/graphql-responses
    environment:
      - PYTHONDONTWRITEBYTECODE=1
    entrypoint:
      - bash
      - -c
      - |
          ./entrypoint.sh
  features-tests:
    build:
      context: ./features
      dockerfile: ./Dockerfile
      target: features-tests
    restart: "no"
    depends_on:
      - graphql-engine
    volumes:
      - ./database-service:/db
      - ./features:/app
      - ./fixtures:/app/fixtures
      - ./test-utils:/app/test_utils
    entrypoint: behave --junit --junit-directory test-reports --tags ~wip
  ui-unit-tests:
    build:
      context: ui
      dockerfile: Dockerfile
      target: unit-tests
      args:
        GRAPHQL_API: http://graphql-engine:${API_PORT:-8080}/v1/graphql/
    restart: "no"
    volumes:
      - .:/app
    entrypoint: yarn test:unit:ci
  ui-integration-tests:
    build:
      context: ui
      dockerfile: Dockerfile
      target: cypress-tests
      args:
        GRAPHQL_API: http://graphql-engine:${API_PORT:-8080}/v1/graphql/
    user: $USER
    environment:
      CYPRESS_baseUrl: http://ui:4000/#
    depends_on:
      - ui
    restart: "no"
    volumes:
      - .:/app
    entrypoint:
      - bash
      - -c
      - |
        npx cypress run --env configFile=integration
  e2e-tests:
    build:
      context: ui
      dockerfile: Dockerfile
      target: cypress-tests
      args:
        GRAPHQL_API: http://graphql-engine:${API_PORT:-8080}/v1/graphql/
    user: $USER
    environment:
      CYPRESS_baseUrl: http://ui:4000/#
    depends_on:
      - ui
    restart: "no"
    volumes:
      - .:/app
    entrypoint:
      - bash
      - -c
      - |
        npx cypress run --env configFile=e2e

volumes:
  db_data:

networks:
  default:
    name: default-network