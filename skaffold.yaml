apiVersion: skaffold/v2alpha2
kind: Config

build:
  tagPolicy:
    sha256: {}
  artifacts:
    - image: shopozor/assets-fixtures
      context: .
      docker:
        dockerfile: backend/assets-service/Dockerfile
    - image: shopozor/graphql-engine
      context: backend/database-service
      docker:
        dockerfile: Dockerfile
        target: app

deploy:
  helm:
    releases:
      - name: minio
        chartPath: bitnami/minio
        remote: true
        namespace: dev
        overrides:
          fullnameOverride: minio
          mode: standalone
          clusterDomain: cluster.local
          persistence:
            enabled: false
            size: 10Gi
          disableWebUI: false
          accessKey:
            password: minio
          secretKey:
            password: minio123
      - name: minio-initialization
        chartPath: backend/assets-service/chart
        namespace: dev
        values:
          image: shopozor/assets-fixtures
        overrides:
          fixtures:
            enabled: true
          minio:
            fullname: minio
            client:
              alias: minio
            server:
              port: 9000
      - name: postgres
        chartPath: bitnami/postgresql-ha
        remote: true
        namespace: dev
        overrides:
          fullnameOverride: postgres
          postgresql:
            username: postgres
            database: postgres
          persistence:
            mountPath: /opt/bitnami/postgresql/data
          volumePermissions:
            enabled: true
      - name: hasura
        # TODO: 1. the migrations can be applied with a separate Job basing on the hasura image containing the client!
        #       2. we need an init container that waits until postgres is up (https://blog.giantswarm.io/wait-for-it-using-readiness-probes-for-service-dependencies-in-kubernetes/)
        #       3. maybe we can use a PodPreset to inject the postgres password into the hasura container
        chartPath: backend/database-service/chart
        namespace: dev
        values:
          image: shopozor/graphql-engine
        overrides:
          postgres:
            secretName: postgres-postgresql
            username: postgres
            database: postgres
            hostname: postgres-pgpool.dev
    flags:
      upgrade:
        - --install

profiles:
  - name: staging
    deploy:
      helm:
        releases:
          - name: minio
            chartPath: bitnami/minio
            remote: true
            namespace: staging
            values:
            overrides:
              fullnameOverride: minio
              mode: distributed
              persistence:
                enabled: true
                storageClass: jelastic-dynamic-volume
                size: 10Gi
              disableWebUI: false
          # TODO: for hasura, look at this: https://v2.helm.sh/docs/chart_template_guide/#creating-a-subchart
          # https://stackoverflow.com/questions/55748639/set-value-in-dependency-of-helm-chart
        flags:
          upgrade:
            - --install
      kubectl:
        manifests:
          - backend/assets-service/k8s/setup/*
          - backend/assets-service/k8s/testing/*
        flags:
          global:
            - --namespace=staging
  - name: production
    deploy:
      helm:
        releases:
          # TODO: use https://github.com/bitnami/charts/blob/master/bitnami/minio/values-production.yaml
          - name: minio
            chartPath: bitnami/minio
            remote: true
            namespace: production
            values:
            overrides:
              fullnameOverride: minio
              mode: distributed
              persistence:
                enabled: true
                storageClass: jelastic-dynamic-volume
                size: 10Gi
              disableWebUI: true
        flags:
          upgrade:
            - --install
      kubectl:
        manifests:
          - backend/assets-service/k8s/setup/*
        flags:
          global:
            - --namespace=production