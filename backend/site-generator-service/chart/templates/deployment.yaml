apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
{{ include "chart.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "chart.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "chart.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: wait-for-hasura
        image: curlimages/curl:latest
        env: {{- include "hasura.envvarsblock" . | nindent 8 }}
        - name: TIMEOUT
          value: "60"
        command:
          - /bin/sh
          - -c
          - |
            echo "waiting $TIMEOUT for $HASURA_PORT to be ready on host $HASURA_HOST"
            for i in `seq 1 $TIMEOUT`;
            do
                echo "waiting for graphql engine"
                version=$(curl -s http://$HASURA_HOST:$HASURA_PORT/v1/version | grep "version")
                echo "VERSION = $version"
                [ "$version" == "" ] && sleep 1 || exit 0
            done
            echo "failed waiting for $HASURA_PORT on host $HASURA_HOST" && exit 1
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ .Values.pullPolicy }}
        env:
          - name: API_PORT
            value: {{ .Values.siteGenerator.server.port | quote }}
          - name: ASSETS_API
            value: http://{{ .Values.services.assets.name }}:{{ .Values.services.assets.port }}
          - name: GRAPHQL_API
            value: http://localhost/graphql/
          - name: OUTPUT_DIR
            value: {{ .Values.siteGenerator.outputDir }}/static
          - name: SRC_DIR
            value: {{ .Values.siteGenerator.srcDir }}
        volumeMounts:
          - name: static-site-data
            mountPath: {{ .Values.siteGenerator.outputDir }}
        ports:
          - name: http
            containerPort: {{ .Values.siteGenerator.server.port }}
            protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: static-site-data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "chart.fullname" .) }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
