apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "chart.fullname" . }}-apply-fixtures
  labels:
{{ include "chart.labels" . | indent 4 }}
spec:
  template:
    spec:
      initContainers:
      - name: wait-for-hasura
        image: curlimages/curl:latest
        env: {{- include "hasura.envvarsblock" . | nindent 8 }}
        - name: TIMEOUT
          value: "60"
        command:
          - /bin/sh
          - -c
          - |
            echo "waiting $TIMEOUT for $HASURA_PORT to be ready on host $HASURA_HOST"
            for i in `seq 1 $TIMEOUT`;
            do
                echo "waiting for graphql engine"
                version=$(curl -s http://$HASURA_HOST:$HASURA_PORT/v1/version | grep "version")
                [ "$version" == "" ] && sleep 1 || exit 0
            done
            echo "failed waiting for $HASURA_PORT on host $HASURA_HOST" && exit 1
      containers:
      - name: {{ .Chart.Name }}-apply-fixtures
        image: {{ .Values.image }}
        env: {{- include "hasura.envvarsblock" . | nindent 8 }}
        volumeMounts:
          - name: data
            mountPath: /app/fixtures
        command:
          - /bin/sh
          - -c
          - |
            ./entrypoint.sh medium
            hasura migrate apply --endpoint http://${HASURA_HOST}:${HASURA_PORT} --project /app/fixtures/database --up all --skip-update-check
      restartPolicy: OnFailure
      volumes:
        - name: data
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "chart.fullname" .) }}
        {{- end }}