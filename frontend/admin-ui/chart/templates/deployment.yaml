apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
{{ include "chart.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "chart.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "chart.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      # - name: wait-for-api
      #   image: busybox
      #   env:
      #   - name: SERVICE_NAME
      #     value: {{ .Values.services.api.hostname }}
      #   command: ['sh', '-c', 'until nslookup $${SERVICE_NAME}; do echo "Waiting for $${SERVICE_NAME}"; sleep 2; done;']
      - name: wait-for-api
        image: curlimages/curl:latest
        env:
        - name: API_HOSTNAME
          value: {{ .Values.services.api.hostname }}
        - name: API_PORT
          value: {{ .Values.services.api.port | quote }}
        - name: TIMEOUT
          value: "60"
        command:
          - /bin/sh
          - -c
          - |
            echo "waiting $TIMEOUT for $API_PORT to be ready on host $API_HOSTNAME"
            for i in `seq 1 $TIMEOUT`;
            do
                echo "waiting for graphql engine"
                version=$(curl -s http://$API_HOSTNAME:$API_PORT/v1/version | grep "version")
                [ "$version" == "" ] && sleep 1 || exit 0
            done
            echo "failed waiting for $API_PORT on host $API_HOSTNAME" && exit 1
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.ui.securityContext | nindent 12 }}
          image: {{ .Values.ui.image }}
          imagePullPolicy: {{ .Values.ui.pullPolicy }}
          volumeMounts:
          - mountPath: /etc/nginx/nginx.conf
            subPath: ui
            readOnly: true
            name: nginx-conf
          ports:
          - name: http
            containerPort: {{ .Values.ui.containerPort }}
            protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.ui.resources | nindent 12 }}
{{- if .Values.storybook.enabled }}
        - name: {{ .Chart.Name }}-storybook
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ .Values.storybook.image }}
          imagePullPolicy: {{ .Values.storybook.pullPolicy }}
          ports:
            - name: http-storybook
              containerPort: {{ .Values.storybook.containerPort }}
              protocol: TCP
          volumeMounts:
          - mountPath: /etc/nginx/nginx.conf
            subPath: storybook
            readOnly: true
            name: nginx-conf
          livenessProbe:
            httpGet:
              path: /
              port: http-storybook
          readinessProbe:
            httpGet:
              path: /
              port: http-storybook
          resources:
            {{- toYaml .Values.storybook.resources | nindent 12 }}
{{- end }}
      volumes:
        - name: nginx-conf
          configMap:
            name: {{ include "chart.fullname" . }}
            items:
              - key: ui
                path: ui
              - key: storybook
                path: storybook
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
