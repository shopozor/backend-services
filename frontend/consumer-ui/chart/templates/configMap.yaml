kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ include "chart.fullname" . }}
data:
  # TODO: is there a way to prevent this copy/pasting?
  ui: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
      worker_connections  1024;
    }

    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;

      sendfile        on;
      #tcp_nopush     on;

      keepalive_timeout  65;

      #gzip  on;

      proxy_cache_path  /var/cache/nginx levels=1:2 keys_zone=nuxt-cache:25m max_size=1g inactive=60m use_temp_path=off;

      map $sent_http_content_type $expires {
          "text/html"                 1h; # set this to your needs
          "text/html; charset=utf-8"  1h; # set this to your needs
          default                     7d; # set this to your needs
      }

      server {
        listen          80;             # the port nginx is listening on
        server_name     localhost;    # setup your domain here

        gzip            on;
        gzip_types      text/plain application/xml text/css application/javascript;
        gzip_min_length 1000;

        charset utf-8;

        root /srv/static;

        location ~* \.(?:ico|gif|jpe?g|png|woff2?|eot|otf|ttf|svg|js|css)$ {
            expires $expires;
            add_header Pragma public;
            add_header Cache-Control "public";

            try_files $uri $uri/;
        }

        location / {
            expires $expires;
            #add_header Content-Security-Policy "default-src 'self' 'unsafe-inline';";
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            add_header X-Frame-Options "SAMEORIGIN";

            try_files $uri $uri/ /index.html;
        }
        # TODO: integrate official nuxt recommended config here!
      }
    }
  storybook: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
      worker_connections  1024;
    }

    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;

      sendfile        on;
      #tcp_nopush     on;

      keepalive_timeout  65;

      #gzip  on;

      server {
        listen 8080;
        server_name localhost;

        root /srv;

        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";

        index index.html;

        charset utf-8;

        location / {
            try_files $uri $uri/ /index.html;
        }

        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        access_log off;
        error_log  /var/log/nginx/app.log error;

        location ~ /\.(?!well-known).* {
            deny all;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
      }
    }