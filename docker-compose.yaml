version: "3.6"
services:
  postgres:
    image: postgres:11.2-alpine
    restart: "always"
    volumes:
      - db_data:/var/lib/postgresql-11.2/data
  graphql-engine:
    image: hasura/graphql-engine:v1.0.0
    ports:
      - "${TEST_API_PORT:-8086}:8080"
    depends_on:
      - postgres
    restart: "always"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
  fixtures-service:
    build:
      context: .
      dockerfile: backend/fixtures-generator/Dockerfile
      target: builder
    image: ${PRODUCT:-shopozor}/fixtures-service:${TAG:-local}
    restart: "no"
    volumes:
      - ./backend/fixtures-generator:/app
      - ./backend/test-utils:/app/test_utils
    environment:
      - PYTHONDONTWRITEBYTECODE=1
    entrypoint: ./entrypoint.sh medium
  jest-unit-tests:
    build:
      context: .
      dockerfile: Dockerfile
      target: jest-unit-testing
    image: ${PRODUCT:-shopozor}/jest-unit-testing:${TAG:-local}
    restart: "no"
    volumes:
      - ./frontend/consumer-ui/test-reports:/app/frontend/consumer-ui/test-reports
      - ./frontend/admin-ui/test-reports:/app/frontend/admin-ui/test-reports
      - ./backend/site-generator-service/test-reports:/app/backend/site-generator-service/test-reports
  database-service-tests:
    build:
      context: .
      dockerfile: backend/database-service/Dockerfile
      target: test
    restart: "no"
    depends_on:
      - graphql-engine
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=./tests:$PYTHONPATH
    volumes:
      - ./backend/database-service/test-reports:/app/test-reports
    entrypoint: ./tests/entrypoint.sh graphql-engine 8080
  service-integration-tests:
    build:
      context: .
      dockerfile: ./backend/tests/Dockerfile
      target: integration-test
    restart: "no"
    depends_on:
      - graphql-engine
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONPATH=./tests:$PYTHONPATH
    volumes:
      - ./backend/tests/test-reports:/app/test-reports
    # TODO: wrap with fixtures.up and fixtures.down!
    entrypoint: ./entrypoint.sh graphql-engine 8080
  # TODO: rework this image so that we have one image for each ui?
  e2e-tests:
    build:
      context: frontend
      dockerfile: Dockerfile
      target: cypress-tests
      args:
        CYPRESS_VERSION: 3.8.0
    restart: "no"
    volumes:
      - .:/app
    # TODO: we need to make sure the consumer-ui / admin-ui are accessible!
    entrypoint: ./frontend/tests/entrypoint-cypress.sh e2e

volumes:
  db_data: